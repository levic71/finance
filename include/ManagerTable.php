<?include "../include/inc_db.php";include "../include/XList.php";define("ACTION_LISTER", 			"0");define("ACTION_AJOUTER",			"1");define("ACTION_AJOUTER_VALIDER",	"2");define("ACTION_MODIFIER",			"3");define("ACTION_MODIFIER_VALIDER",	"4");define("ACTION_SUPPRIMER",			"5");define("ACTION_SUPPRIMER_VALIDER",	"6");define("ACTION_RECHERCHER",			"7");define("ACTION_RECHERCHER_VALIDER",	"8");define("ACTION_EDITER",				"9");define("ACTION_IMPRIMER_PDF",		"10");define("_IMGDIR_",					"../uploads/");define("_ADD_LIB_",                0);define("_LIST_LIB_",               1);define("_DEL_LIB_",                2);define("_UPDATE_LIB_",             3);define("_SEARCH_LIB_",             4);define("_DETAIL_LIB_",             5);// ///////////////////////////////////////////////////////////////////////////////////////////////////// CLASS ManagerTable																					29/09/2001// Description : Permet la gestion d'une table SQL// /////////////////////////////////////////////////////////////////////////////////////////////////////class ManagerTable{var $connexion;		// Connexion à la basevar $dbName;		// Nom de la base de donnéevar $table;			// Table à managervar $fields;		// Champs de la tablevar $columms;		// Colonne de la tablevar $colsDisplay;	// Liste des colonnes à afficher dans la listevar $colsName;		// Libellé des colonnes pour l'affichagevar $colsLength;	// Taille des colonnes pour l'affichagevar $colsOblig;		// Colonnes obligatoiresvar $colsDiseable;	// Colonnes non modifiablesvar $colsYesNo;		// Permet d'afficher des Oui/Non à la place de 0/1var $colsHidden;	// Permet de cacher des colonnesvar $colsLink;		// Colonnes avec lien hypertextevar $colsDefSelBox;	// Colonnes avec un choix de valeursvar $colsFilter;	// Colonnes avec un filtrevar $colsAlig;		// Alignement des Colonnesvar $colsOrderBy;	// Colonnes qui doivent apparaitre dans le ORDER BY du SELECTvar $colsInSelect;	// Permet de spécifier les colonnes du select si on veut autre chose que '*'var $colsImage;		// Colonnes imagevar $primaryKeys;	// Clés primairesvar $pKeysType;		// Type des Clés primairesvar $target;		// Target de la pagevar $titles;        // Titre des tableaux (LISTE/AJOUT/SUPP/MAJ/DETAIL)var $displayColAct;	// Permet d'afficher ou non la colonne Actionvar $indexLists;	// Liste des index pour l'aide à la saisie d'une colonnevar $values;		// Valeurs des champsvar $startRow;		// Indice du premier elt de la liste à affichervar $admTools;		// Affichage des outils d'administration de la tablevar $colsDefValues;	// Valeurs par défaut d'une colonnevar $code_action;	// Action en cours (AJOUTER/MODIFIER/...)var $nbDisplayRows; // Nb de lignes affichéesvar $ajouterJSCode; // Code Javascript appelé si sélection bouton 'Ajouter' (Défaut:document.forms[0].code_action.value='".ACTION_AJOUTER."';)var $modifierJSCode;   // Code Javascript appelé si sélection bouton 'Modifier' (Défaut:document.forms[0].code_action.value='".ACTION_MODIFER."';)var $supprimerJSCode;  // Code Javascript appelé si sélection bouton 'Supprimer' (Défaut:document.forms[0].code_action.value='".ACTION_SUPPRIMER."';)var $rechercherJSCode; // Code Javascript appelé si sélection bouton 'Rechecher' (Défaut:document.forms[0].code_action.value='".ACTION_RECHERCHER."';)var $statusHtmlCode;   // Code HTML personnalisé inclut dans la status barrefunction ManagerTable($table){	$this->dbName = dbc::getDBName();	$this->table     = $table;	$this->connexion = dbc::connect();	$this->fields    = mysqli_list_fields($this->dbName, $this->table, $this->connexion);	$this->columns   = mysqli_num_fields($this->fields);    $this->titles        = array(_LIST_LIB_ => "Table ".$this->table, _ADD_LIB_ => "Ajout dans ".$this->table, _DEL_LIB_ => "Suppression dans ".$this->table, _UPDATE_LIB_ => "Mise à jour dans ".$this->table, _SEARCH_LIB_ => "Recherche dans ".$this->table, _DETAIL_LIB_ => "Détail dans ".$this->table);	$this->displayColAct = false;	$this->startAtRow 	 = 0;	$this->pdf           = 0;	$this->admTools		 = false;	$this->nbDisplayRows = 10;    $this->ajouterJSCode     = "document.forms[0].code_action.value='".ACTION_AJOUTER."';";    $this->modifierJSCode    = "letsgo";    $this->supprimerJSCode   = "letsgo";    $this->rechercherJSCode  = "document.forms[0].code_action.value='".ACTION_RECHERCHER."';";    $this->statusHtmlCode    = "";	// On récupère le code action	$this->code_action = ToolBox::get_global("code_action");	if ($this->code_action == "") $this->code_action = ACTION_LISTER;	// On récupère l'index de position dans la liste	$this->startAtRow = ToolBox::get_global("first_row");	if ($this->startAtRow == "") $this->startAtRow = 0;}function setAdmTools() {	$this->admTools = true;	$this->setDisplayColAction(true);}function setStatusHtmlCode($code)    { $this->statusHtmlCode   = $code; }function setAjouterJSCode($code)     { $this->ajouterJSCode    = $code; }function setModifierJSCode($code)    { $this->modifierJSCode   = $code; }function setSupprimerJSCode($code)   { $this->supprimerJSCode  = $code; }function setRechercherJSCode($code)  { $this->rechercherJSCode = $code; }function setStartAtRow($start)	{ $this->startAtRow = $start; }function setValues($vals)		{ $this->values = $vals; }function setColsLink($cols)		{ $this->colsLink = $cols; }function setColsAlign($cols)	{ $this->colsAlign = $cols; }function setColsOrderBy($cols)	{ $this->colsOrderBy = $cols; }function setColsInSelect($cols)	{ $this->colsInSelect = $cols; }function setColsImage($cols)	{ $this->colsImage = $cols; }function setColsHidden($cols)	{ $this->colsHidden = $cols; }function setColsFilter($cols)	{ $this->colsFilter = $cols; }function setIndexLists($index)	{ $this->indexLists = $index; }function setColsYesNo($cols)	{ $this->colsYesNo = $cols; }function setColsDiseable($cols)	{ $this->colsDiseable = $cols; }function setColsOblig($cols)	{ $this->colsOblig = $cols; }function setTitles($titles)	    { $this->titles = $titles; }function setColsDisplay($cols)	{ $this->colsDisplay = $cols; }function setColsName($cols)		{ $this->colsName = $cols; }function setColsLength($cols)	{ $this->colsLength = $cols; }function setColsDefSelBox($cols)	{ $this->colsDefSelBox = $cols; }function setDisplayColAction($bool)	{ $this->displayColAct = $bool; }function setColsDefValues($cols)	{ $this->colsDefValues = $cols; }function setNbDisplayRows($nb)		{ $this->nbDisplayRows = $nb; }function isSetActionLister(){	return (	$this->code_action == ACTION_LISTER				||				$this->code_action == ACTION_RECHERCHER_VALIDER	||				$this->code_action == ACTION_SUPPRIMER_VALIDER	||				$this->code_action == ACTION_MODIFIER_VALIDER	||				$this->code_action == ACTION_AJOUTER_VALIDER			);}function isSetActionEditer()	{ return ($this->code_action == ACTION_EDITER); }function isSetActionModifier()	{ return ($this->code_action == ACTION_MODIFIER); }function isSetActionSupprimer()	{ return ($this->code_action == ACTION_SUPPRIMER); }function isSetActionAjouter()	{ return ($this->code_action == ACTION_AJOUTER); }function isSetActionRechercher(){ return ($this->code_action == ACTION_RECHERCHER); }function setPrimaryKeys($keys) {	$this->primaryKeys = $keys;	// On recherche les types des cles primaires	for ($i = 0; $i < $this->columns; $i++)	{		$name = mysqli_field_name($this->fields, $i);		if ($this->searchInArray($name, $this->primaryKeys))			$this->pKeysType[$name] = mysqli_field_type($this->fields, $i);	}}function setTarget($target) {	$this->target = $target;}function desc() {	printf("<TABLE BORDER=1 CELLPADDING=1 CELLSPACING=1 WIDTH=100%%>\n");	printf("<TR><TD COLSPAN=4 ALIGN=CENTER BGCOLOR=#CCCCFF><B>Table %s</B></TD>\n", $this->table);	printf("<TR BGCOLOR=#FFFFCC><TD ALIGN=CENTER>%s</TD><TD ALIGN=CENTER>%s</TD><TD ALIGN=CENTER>%s</TD><TD ALIGN=CENTER>%s</TD>\n", "Type", "Name", "Len", "Flags");	for ($i = 0; $i < $this->columns; $i++)	{		$type  = mysqli_field_type  ($this->fields, $i);		$name  = mysqli_field_name  ($this->fields, $i);		$len   = mysqli_field_len   ($this->fields, $i);		$flags = mysqli_field_flags ($this->fields, $i);		printf("<TR><TD>%s</TD><TD>%s</TD><TD ALIGN=RIGHT>%s</TD><TD>%s</TD>\n", $type,$name,$len,$flags);	}	printf("</TABLE>\n");}function listAllTables() {	echo "Liste des tables";	$liste = mysqli_list_tables($this->dbName);	if ($liste)	{		echo "<table border=1 width=100%><tr><th>Tables de la base de données</th></tr>" ;		for ($i=0;$i<mysqli_num_rows($liste);$i++)		{			echo "<tr><td>".mysqli_tablename($liste, $i)."</td></tr>" ;		}		echo "</table>" ;		mysqli_free_result($liste) ;	}}function searchInArray($search, $tab) {	if (!is_array($tab)) return false;	foreach($tab as $elt)		if ($search == $elt) return true;	return false;}function searchInKeyArray($search, $tab) {	if (!is_array($tab)) return false;	if (isset($tab[$search])) return true;	return false;}function isIntegerType($type) {	if ($type == "int")		return true;	return false;}function getFormatLabel($label, $type) {	if ($this->isIntegerType($type))	{		$res = $label;		if ($res == "") $res = "null";	}	else		$res = "'".$label."'";	return $res;}function displayZoomImage(){?><SCRIPT>var isIE=document.all&&navigator.userAgent.indexOf("Opera")==-1var isNS6=document.getElementById&&!document.allvar isNS4=document.layersfunction voir (event, src) {	var coorx = isIE? event.clientX : isNS6? event.clientX : event.x;	var coory = isIE? event.clientY : isNS6? event.clientY : event.y;	document.images['roll'].src=src;	calque = document.getElementById("menu1").style;	calque.visibility = 'visible';	calque.top = (coory-20+ document.body.scrollTop);	calque.left = (coorx+20);}function cache () {	calque = document.getElementById("menu1").style;	calque.visibility = 'hidden';}</SCRIPT><DIV ID="menu1" STYLE="position:absolute; width:66px; height:66px; z-index:2; visibility:hidden;"><IMG SRC="/com/img/1pixel.gif" NAME="roll" style="border: 1px solid black;"></DIV><?}function lister(){	// On créé l'objet XList	$xl = new XList();	// Pour le grossissement des images	if (!XList::isPdf()) $this->displayZoomImage();	// Récupération des types des colonnes	for ($i = 0; $i < $this->columns; $i++)	{		$name = mysqli_field_name($this->fields, $i);		$columnsType[$name] = mysqli_field_type($this->fields, $i);	}	// Si aucune cle primaire definie, alors on prend les champs affiches comme cle primaire	if (!isset($this->primaryKeys)) $this->setPrimaryKeys($this->colsDisplay);	// Gestion des filtes sur les colonnes	$select_orderBy = "";	if (isset($this->colsOrderBy) && sizeof($this->colsOrderBy) > 0)	{		while((list($cle, $orderBy) = each($this->colsOrderBy)))			$select_orderBy  = (($select_orderBy == "") ? "ORDER BY " : $select_orderBy.", ").$orderBy;	}	// Récupération du filtre de recherche, s'il existe	$select_search = ToolBox::get_global("select_search");	// Gestion des filtes sur les colonnes	if ($select_search == "" && isset($this->colsFilter))	{		while((list($cle, $filtre) = each($this->colsFilter)))		{			$search_pattern = $this->getFormatLabel($filtre, $columnsType[$cle]);			$select_search  = (($select_search == "") ? "WHERE " : $select_search." AND ").$cle."=".$search_pattern;		}	}	// Récupération des champs de recherche, s'il en a ...	for ($i = 0; $i < $this->columns; $i++)	{		$name   = mysqli_field_name($this->fields, $i);		$check  = ToolBox::get_global("check_".$name);		$valeur = ToolBox::get_global($name);		if ($check == "on" && $valeur != "")		{			$search_pattern = $this->getFormatLabel($valeur."%", $columnsType[$name]);			$select_search  = (($select_search == "") ? "WHERE " : $select_search." AND ").$name." LIKE ".$search_pattern;		}	}	$select_search = str_replace("\'", "'", $select_search);	$requete = "SELECT ".(isset($this->colsInSelect) ? $this->colsInSelect : "*")." FROM ".$this->table." ".$select_search." ".$select_orderBy;	// Gestion des noms de colonnes	foreach($this->colsDisplay as $l)		$entete[] = isset($this->colsName[$l]) ? $this->colsName[$l] : $l;	// Gestion de la colonne Action	if ($this->displayColAct) $entete["action"] = "Action";	if (!XList::isPdf())	{?>		<SCRIPT>		function letsgo(requete, action)		{			document.forms[0].code_action.value=action;			document.forms[0].pkeys_where_<?= $this->table ?>.value=requete;		}		</SCRIPT><?	}	if ($this->displayColAct)	{		$this->colsDisplay = array_merge($this->colsDisplay, array("action"));		if (isset($this->colsAlign)) $this->colsAlign   = array_merge($this->colsAlign,   array("CENTER"));	}	$xl->setTitle($this->titles[_LIST_LIB_]);	$xl->setTargetStatement($this->target);	$xl->setNumerotationOn();	$xl->setColumnsNames($entete);	$xl->setDisplayColAction($this->displayColAct);	$xl->setColGroup($this->admTools ? array_merge($this->colsLength, array(50)) : $this->colsLength);	if (isset($this->colsAlign)) $xl->setColumnsAlign($this->colsAlign);	$xl->setSearchStatement($select_search);	$xl->setNbDisplayRows($this->nbDisplayRows);	$xl->setFirstNumRowDisplay($this->startAtRow);	$xl->setRequete($requete);	$xl->setMappingColumns($this->colsDisplay);    $xl->setStatusHtmlCode($this->statusHtmlCode);	$xl->executeSQL();	for($row = $xl->getFirstRow(); $row; $row = $xl->getNextRow())	{		// Permet de retrouver un elt de la liste grace aux valeurs de sa cle primaire		$pkeys_where = "";		foreach($this->primaryKeys as $l)			$pkeys_where .= (($pkeys_where != "") ? " AND " : " WHERE ").$l."=".$this->getFormatLabel($row[$l], $this->pKeysType[$l]);		$pkeys_where = urlencode($pkeys_where);		// Gestion de la colonne ACTION		if ($this->displayColAct)		{			$row["action"] = "";			$row["action"] .= "<INPUT TYPE=IMAGE ALT=\"Modifier\"  SRC=../images/small_edit2.gif    onClick=\"javascript:".$this->modifierJSCode."('".$pkeys_where."', '".ACTION_MODIFIER."');\"></INPUT>";			$row["action"] .= "&nbsp;";			$row["action"] .= "<INPUT TYPE=IMAGE ALT=\"Supprimer\" SRC=../images/small_poubelle.gif onClick=\"javascript:".$this->supprimerJSCode."('".$pkeys_where."', '".ACTION_SUPPRIMER."');\"></INPUT>";		}		// Gestion des labels OUI/NON		while(list($cle, $valeur) = each($row))		{			if ($this->searchInArray($cle, $this->colsYesNo))				$row[$cle] = ($valeur == 0) ? "Non" : "Oui";		}		// Gestion des champs index (cad avec un libellé dans une autre table)		if (isset($this->indexLists))		{			reset($this->indexLists);			while(list($cle, $valeur) = each($this->indexLists))			{				if (strstr($valeur, "|"))				{					$req = "SELECT ";					$options = explode("|", $valeur);					if (isset($options[1])) $req .= $options[1]." res_colonne FROM ";					if (isset($options[2])) $req .= $options[2]." WHERE ";					if (isset($options[0])) $req .= $options[0]."=".$row[$cle]." ORDER BY res_colonne";					$res = dbc::execSQL($req);					$tmp = mysqli_fetch_array($res);					mysqli_free_result($res);					$row[$cle] = $tmp["res_colonne"];				}			}		}		// Gestion des liens hypertextes		if (isset($this->colsLink))		{			reset($this->colsLink);			while(list($cle, $valeur) = each($this->colsLink))			{				$raccord   = strstr($valeur, "?") ? "&" : "?";				$row[$cle] = "<A HREF=\"".$valeur."".$raccord."pkeys_where_".$this->table."=".$pkeys_where."\">".$row[$cle]."</A>";			}		}		// Gestion des images		if (isset($this->colsImage))		{			reset($this->colsImage);			while(list($cle, $valeur) = each($this->colsImage))			{				if (strlen($row[$valeur]) == 0) $row[$valeur] = "../images/templates/defaut/linconnu.gif";				$row[$valeur] = "<A HREF=\"javascript:void(0);\" onmouseover=\"cache();voir(event, '".$row[$valeur]."');\" onmouseout=\"cache();\"><IMG SRC=\"".$row[$valeur]."\" border=1 HEIGHT=20 WIDTH=20></A>";			}		}		// Gestion des champs avec des valeurs issues de données prédéfinies		if (isset($this->colsDefSelBox))		{			reset($this->colsDefSelBox);			while(list($cle, $valeur) = each($this->colsDefSelBox))			{				foreach($valeur as $colSel)				{					if (strstr($colSel, "|"))					{						$options = explode("|", $colSel);						if (isset($options[0]) && $options[0] == $row[$cle] && isset($options[1]))							$row[$cle] = $options[1];					}				}			}		}		$xl->changeCurrentRow($row);	}	if (XList::isPdf())	{		$xl->displayPDF();		exit();	}	echo "<TR VALIGN=CENTER><TD ALIGN=CENTER>";	$xl->display();	echo "</TD>";	if ($this->admTools)	{		printf("<TR><TD ALIGN=RIGHT><TABLE BORDER=0>\n");		printf("<TR><TD ALIGN=CENTER><INPUT TYPE=SUBMIT NAME=bouton VALUE=Ajouter    onClick=\"javascript:".$this->ajouterJSCode."\"   ></INPUT></TD>\n");		printf("    <TD ALIGN=CENTER><INPUT TYPE=SUBMIT NAME=bouton VALUE=Rechercher onClick=\"javascript:".$this->rechercherJSCode."\"></INPUT></TD>\n");		printf("</TABLE></TD>\n");	}	else	{		printf("<TR><TD ALIGN=RIGHT><TABLE BORDER=0>\n");		printf("    <TD ALIGN=CENTER><INPUT TYPE=SUBMIT NAME=bouton VALUE=Rechercher onClick=\"javascript:".$this->rechercherJSCode."\"></INPUT></TD>\n");		printf("</TABLE></TD>\n");	}}function getLibButton($action){	if ($action == ACTION_MODIFIER)			$lib = "Modifier";	else if ($action == ACTION_SUPPRIMER)	$lib = "Supprimer";	else if ($action == ACTION_AJOUTER)		$lib = "Ajouter";	else if ($action == ACTION_RECHERCHER)	$lib = "Rechercher";	else	$lib = "Valider";	return $lib;}function getTitle($action){	if ($action == ACTION_MODIFIER)			$lib = $this->titles[_UPDATE_LIB_];	else if ($action == ACTION_SUPPRIMER)	$lib = $this->titles[_DEL_LIB_];	else if ($action == ACTION_AJOUTER)		$lib = $this->titles[_ADD_LIB_];	else if ($action == ACTION_RECHERCHER)	$lib = $this->titles[_SEARCH_LIB_];	else if ($action == ACTION_EDITER)		$lib = $this->titles[_DETAIL_LIB_];	else	$lib = "Titre";	return $lib;}function getNextAction($action){	if ($action == ACTION_MODIFIER)			$action = ACTION_MODIFIER_VALIDER;	else if ($action == ACTION_SUPPRIMER)	$action = ACTION_SUPPRIMER_VALIDER;	else if ($action == ACTION_AJOUTER)		$action = ACTION_AJOUTER_VALIDER;	else if ($action == ACTION_RECHERCHER)	$action = ACTION_RECHERCHER_VALIDER;	else	$action = ACTION_LISTER;	return $action;}function formulaireSaisie($action){	// Pour le grossissement des images	$this->displayZoomImage();	// Debut du formulaire	echo "<TR VALIGN=CENTER><TD ALIGN=CENTER>";	// On recupere les valeurs de l'enregistrement	$pkeys_where = ToolBox::get_global("pkeys_where_".$this->table);	// On propage la primary key (sauf en mode pdf)	if (!XList::isPdf())		echo "<INPUT TYPE=HIDDEN NAME=pkeys_where_".$this->table." VALUE=\"".$pkeys_where."\"></INPUT>";	// Recuperation des infos de l'elt a mettre a jour	if ($action == ACTION_MODIFIER || $action == ACTION_SUPPRIMER || $action == ACTION_EDITER)	{		$req = "SELECT * FROM ".$this->table." ".urldecode($pkeys_where);		$res = dbc::execSQL($req);		while($row = mysqli_fetch_array($res))		{			for ($j = 0; $j < $this->columns; $j++)			{				$variable = mysqli_field_name($this->fields, $j);				$this->values[$variable] = $row[$variable];			}		}	}	// Creation du tableau pour l'affichage	$tab = new simple_array(2);	$tab->entete($this->getTitle($action));//	$tab->separation();//	if ($action == ACTION_RECHERCHER)//		$tab->ligne("<FONT COLOR=brown>[ Saisissez les champs de recherche ]</FONT>");//	else if ($action == ACTION_AJOUTER || $action == ACTION_MODIFIER)//		$tab->ligne("<I><FONT COLOR=brown>(*) Champs Obligatoire</FONT></I>");//	$tab->separation();	$tab->ligneVide();	for ($i = 0; $i < $this->columns; $i++)	{		$type  = mysqli_field_type  ($this->fields, $i);		$name  = mysqli_field_name  ($this->fields, $i);		$len   = mysqli_field_len   ($this->fields, $i);		$flags = mysqli_field_flags ($this->fields, $i);		$lname = isset($this->colsName[$name]) ? $this->colsName[$name] : $name;		$auto_inc = ereg("auto_increment", $flags) ? true : false;		$blob     = ereg("blob", $type)            ? true : false;		$date     = ereg("date", $type)            ? true : false;		// Récupération des valeurs par défauts		if ($action == ACTION_AJOUTER && $this->searchInKeyArray($name, $this->colsDefValues))			$this->values[$name] = $this->colsDefValues[$name];		// Si champ auto incrémenté par insertion SQL, alors on passe		if ($auto_inc) continue;		// On récupère la valeur du champ si elle est affectee		$lib_val = ($this->searchInKeyArray($name, $this->values)) ? str_replace("\"", "&#34;", $this->values[$name]) : "";		// Pour indiquer qu'un champ est obligatoire		// $lib_obl = $this->searchInArray($name, $this->colsOblig) ? "<SMALL><FONT COLOR=brown><B>*</B></FONT></SMALL>" : "";		$lib_obl = "";		$class_obl = $lib_val != "" ? "" : "CLASS=obl";		$lib_obl_style = $this->searchInArray($name, $this->colsOblig) ? $class_obl."' onKeyUp='javascript:changeColor(this);'" : "";		// Traitement des champs caches		if ($this->searchInArray($name, $this->colsHidden))		{			echo "<INPUT TYPE=HIDDEN NAME=\"".$name."\" VALUE=\"".$lib_val."\">";			continue;		}		echo "<INPUT TYPE=\"hidden\" name=\"MAX_FILE_SIZE\" value=\"1000000\">";		unset($item);		// On mémorise le champ sur lequel on va positionner le focus		if (!isset($focus_field)) $focus_field = $name;		// Pour la recherche, on positionne un flag de modification de champ		$search = "";		$search_onChange = "";		if ($action == ACTION_RECHERCHER)		{			$search  = "<TD><INPUT TYPE=CHECKBOX NAME=check_".$name." STYLE=\"{visibility: hidden;}\"></INPUT></TD>";			$search_onChange = " onChange='javascript:document.forms[0].check_".$name.".checked=true;'";			$lib_obl = "";		}		// Traitement de l'affichage des champs en fonctions de leurs types		if ($date)			$item = array($lname." : |RIGHT", "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0><TR><TD><INPUT TYPE=TEXT NAME=".$name." VALUE=".($lib_val == "" ? date("Y-m-d") : $lib_val)." SIZE=30 MAXLENGTH=".$len."></INPUT></TD>".$search."<TD>(AAAA-MM-JJ)</TD><TD>".$lib_obl."</TD></TABLE>");		else if ($this->searchInArray($name, $this->colsYesNo))		{		  	$non_chk = (isset($this->values[$name]) && $this->values[$name] == 0) ? "CHECKED" : "";		   	$oui_chk = (isset($this->values[$name]) && $this->values[$name] == 1) ? "CHECKED" : "";			if ($non_chk == "" && $oui_chk == "") $oui_chk = "CHECKED";		   	$item = array($lname." : |RIGHT", "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0><TR><TD><INPUT TYPE=RADIO NAME=".$name." VALUE=0 ".$non_chk."> Non</INPUT></TD><TD><INPUT TYPE=RADIO NAME=".$name." VALUE=1 ".$oui_chk."> Oui</INPUT></TD>".$search."<TD>".$lib_obl."</TD></TABLE>");		}		else if ($this->searchInArray($name, $this->colsDiseable))			$item = array($lname." : |RIGHT", $lib_val);		else if ($this->searchInKeyArray($name, $this->indexLists))		{			$tag = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0><TR><TD><SELECT NAME=".$name.">";			if (strstr($this->indexLists[$name], "|"))			{				$req = "SELECT ";				$options = explode("|", $this->indexLists[$name]);				if (isset($options[0])) $req .= $options[0].", ";				if (isset($options[1])) $req .= $options[1]." res_colonne FROM ";				if (isset($options[2])) $req .= $options[2];				if (isset($options[3])) $req .= " WHERE ".$options[3]." ORDER BY res_colonne";				$res = dbc::execSQL($req);				while(list($champ1, $champ2) = mysqli_fetch_array($res))				{					$ind_sel = ($this->searchInKeyArray($name, $this->values) && $champ1 == $this->values[$name]) ? "SELECTED" : "";					$tag .= "<OPTION VALUE=".$champ1." ".$ind_sel.">".$champ2;				}				mysqli_free_result($res);			}			$tag .= "</SELECT></TD>".$search."<TD>".$lib_obl."</TD></TABLE>";			$item = array($lname." : |RIGHT", $tag);		}		else if ($this->searchInKeyArray($name, $this->colsDefSelBox))		{			$tag = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0><TR><TD><SELECT NAME=".$name.">";			foreach($this->colsDefSelBox[$name] as $defSel)			{				if (strstr($defSel, "|"))				{					$tag .= "<OPTION VALUE=\"";					$options = explode("|", $defSel);					if (isset($options[0]))					{						$ind_sel = ($this->searchInKeyArray($name, $this->values) && $options[0] == $this->values[$name]) ? "SELECTED" : "";						$tag .= $options[0]."\" ".$ind_sel."> ";					}					if (isset($options[1])) $tag .= $options[1];				}			}			$tag .= "</SELECT></TD>".$search."<TD>".$lib_obl."</TD></TABLE>";			$item = array($lname." : |RIGHT", $tag);		} 		else if ($this->searchInArray($name, $this->colsImage))		{//				if (strlen($row[$valeur]) == 0) $row[$valeur] = "../images/templates/defaut/linconnu.gif";//				$row[$valeur] = "<IMG SRC=\"".$row[$valeur]."\" BORDER=1 HEIGHT=20 WIDTH=20></A>";			$img_acces = strlen($lib_val) == 0 ? "" : "<TD WIDTH=5></TD><TD><A HREF=\"javascript:void(0);\" onmouseover=\"cache();voir(event, '".$lib_val."');\" onmouseout=\"cache();\"><IMG SRC=".$lib_val." HEIGHT=20 WIDTH=20 BORDER=1></A></TD>";			$item = array($lname." : |RIGHT", "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0><TR><TD><INPUT TYPE=FILE NAME=".$name." VALUE=\"".$lib_val."\" SIZE=30 MAXLENGTH=".$len."></INPUT></TD>".$search."".$img_acces."<TD>".$lib_obl."</TD></TABLE>");		}		else if ($blob && $len < 70000)			$item = array($lname." : |RIGHT", "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0><TR><TD><TEXTAREA NAME=".$name." ROWS=6 COLS=35>".$lib_val."</TEXTAREA></TD>".$search."<TD>".$lib_obl."</TD></TABLE>");		else if ($blob && $len > 70000)			$item = array($lname." : |RIGHT", "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0><TR><TD><TEXTAREA NAME=".$name." ROWS=6 COLS=35>".$lib_val."</TEXTAREA></TD>".$search."<TD>".$lib_obl."</TD></TABLE>");		else			$item = array($lname." : |RIGHT", "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0><TR><TD><INPUT TYPE=TEXT NAME=".$name." SIZE=30 ".$search_onChange." VALUE=\"".$lib_val."\" ".$lib_obl_style."></INPUT></TD>".$search."<TD>".$lib_obl."</TD></TABLE>");		$tab->ligne($item);		// Si on est en mode EDITER, il faut déactiver les champs		if ($action == ACTION_EDITER)		{			printf("<SCRIPT>\ndocument.forms[0].".$name.".disabled=true;\n</SCRIPT>\n");		}	}	$tab->end();	echo "</TD>";	echo "<SCRIPT>";	if ($action == ACTION_MODIFIER && isset($focus_field)) printf("document.forms[0].".$focus_field.".focus();\n");	echo "function verif_form()";	echo "{";	if ($action != ACTION_RECHERCHER && isset($this->colsOblig) && sizeof($this->colsOblig) > 0)	{		foreach($this->colsOblig as $elt)		{			echo "	res = verif_alphanumext(document.forms[0].".$elt.".value, '".$elt."', -1);";			echo "	if (res == false) return(false);";		}	}	echo "	document.forms[0].code_action.value='".$this->getNextAction($action)."';";	echo "	return true;";	echo "}";	echo "</SCRIPT>";?>	<TR><TD ALIGN=RIGHT><TABLE BORDER=0>		<TR><? if ($action != ACTION_EDITER) { ?>			<TD ALIGN=CENTER><INPUT TYPE=SUBMIT NAME=bouton VALUE=<?= $this->getLibButton($action) ?> onClick="return verif_form();"></INPUT></TD><? } ?>			<TD ALIGN=CENTER><INPUT TYPE=SUBMIT NAME=bouton VALUE=Annuler></INPUT></TD>		</TABLE></TD><?}function insert(){	// Recuperation des images	if (count($this->colsImage) > 0)	{		reset($this->colsImage);		while(list($cle, $valeur) = each($this->colsImage))		{			$source   = ToolBox::get_global($valeur);			$filename = ToolBox::get_global($valeur."_name");			if ($source != "" && file_exists($source))				copy($source, _IMGDIR_.$filename);		}	}	$vals = "";	$cols = "";	for ($i = 0; $i < $this->columns; $i++)	{		$type  = mysqli_field_type  ($this->fields, $i);		$name  = mysqli_field_name  ($this->fields, $i);		$flags = mysqli_field_flags ($this->fields, $i);		$auto_inc = ereg("auto_increment", $flags) ? true : false;		if (!$auto_inc)		{			$cols = $cols.$name;			if ($this->searchInArray($name, $this->colsImage))			{				$val_tmp = ToolBox::get_global($name."_name");				$vals .= "'".($val_tmp == "" ? "" : _IMGDIR_.$val_tmp)."'";			}			else				$vals .= $this->getFormatLabel(ToolBox::get_global($name), $type);			if ($i != ($this->columns - 1))			{				$cols .= ",";				$vals .= ",";			}		}	}	$insert = "insert into ".$this->table." (".$cols.") values (".$vals.");";	$res = dbc::execSQL($insert);	if ($res)	ToolBox::alert("Insertion Ok");	else		ToolBox::alert("Echec Insertion");}function update(){	$vals = "";	$cols = "";	for ($i = 0; $i < $this->columns; $i++)	{		$type  = mysqli_field_type  ($this->fields, $i);		$name  = mysqli_field_name  ($this->fields, $i);		$flags = mysqli_field_flags ($this->fields, $i);		$auto_inc = ereg("auto_increment", $flags) ? true : false;		if (!$auto_inc)		{			if ($this->searchInArray($name, $this->colsImage))			{				$source   = ToolBox::get_global($name);				$filename = ToolBox::get_global($name."_name");				if ($source != "" && file_exists($source))				{					$target = _IMGDIR_.$filename;					copy($source, $target);					$vals = $vals.$name."='".$target."'";					if ($i != ($this->columns - 1)) $vals = $vals.",";				}			}			else			{				$vals .= $name."=".$this->getFormatLabel(ToolBox::get_global($name), $type);				if ($i != ($this->columns - 1)) $vals .= ",";			}		}	}	// Traitements speciaux	$vals = ereg_replace(",$", "", $vals);	$vals = ereg_replace("^$", "", $vals);	$vals = ereg_replace(",,", ",", $vals);	$buf = urldecode(ToolBox::get_global("pkeys_where_".$this->table));	$buf2 = str_replace("\\'", "''", $vals);	$buf2 = str_replace("\\\"", "\"\"", $buf2);	$req = "UPDATE ".$this->table." SET ".$buf2." ".$buf;	$res = dbc::execSQL($req);	ToolBox::alert('Enregistrement modifié ...');}function delete(){	$buf = urldecode(ToolBox::get_global("pkeys_where_".$this->table));	$req = "DELETE FROM ".$this->table." ".$buf;	$res = dbc::execSQL($req);	ToolBox::alert('Enregistrement supprimé ...');}function display(){	echo "<TABLE BORDER=0>\n";	echo "<INPUT TYPE=HIDDEN NAME=code_action VALUE=\"".ACTION_LISTER."\"></INPUT>\n";	echo "<INPUT TYPE=HIDDEN NAME=pkeys_where_".$this->table." VALUE=\"\"></INPUT>\n";	if ($this->code_action == ACTION_LISTER)		$this->lister();	else if ($this->code_action == ACTION_AJOUTER)		$this->formulaireSaisie(ACTION_AJOUTER);	else if ($this->code_action == ACTION_AJOUTER_VALIDER)	{		$this->insert();		$this->lister();	}	else if ($this->code_action == ACTION_MODIFIER)		$this->formulaireSaisie(ACTION_MODIFIER);	else if ($this->code_action == ACTION_MODIFIER_VALIDER)	{		$this->update();		$this->lister();	}	else if ($this->code_action == ACTION_SUPPRIMER)		$this->formulaireSaisie(ACTION_SUPPRIMER);	else if ($this->code_action == ACTION_SUPPRIMER_VALIDER)	{		$this->delete();		$this->lister();	}	else if ($this->code_action == ACTION_RECHERCHER)		$this->formulaireSaisie(ACTION_RECHERCHER);	else if ($this->code_action == ACTION_RECHERCHER_VALIDER)		$this->lister();	else if ($this->code_action == ACTION_EDITER)		$this->formulaireSaisie(ACTION_EDITER);	echo "</TABLE>";	mysqli_close($this->connexion);}}?>